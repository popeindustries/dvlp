#!/usr/bin/env node

process.env.NODE_NO_WARNINGS = '1';

const pkg = require('../package.json');

process.env.DVLP_LAUNCHER = 'cmd';

const program = require('commander');
const { server } = require('../dvlp.js');

program
  .usage('[options] [path...]')
  .description(
    `Start a development server, restarting and reloading connected browsers on file changes.
  Serves static files from one or more "path" directories, or a custom application
  server if "path" is a single file.`,
  )
  .option('-p, --port <port>', 'port number', parseInt)
  .option(
    '-m, --mock <path>',
    'path to mock files (directory, file, glob pattern)',
  )
  .option('-k, --hooks <path>', 'path to optional hooks registration file')
  .option(
    '--ssl <path>',
    `enable https mode by specifying path to directory containing ".crt" and ".key" files`,
  )
  .option(
    '-r, --rollup-config <path>',
    'path to optional Rollup.js config file',
  )
  .option('-s, --silent', 'suppress default logging')
  .option('--no-reload', 'disable reloading connected browsers on file change')
  .option(
    '-t, --transpiler <path>',
    '[deprecated] path to optional transpiler file',
  )
  .arguments('[path...]')
  .action(boot)
  .version(pkg.version, '-v, --version');

program.parse(process.argv);

async function boot(path = [process.cwd()]) {
  try {
    await server(path, {
      certsPath: program.ssl,
      hooksPath: program.hooks,
      mockPath: program.mock,
      port: program.port,
      reload: program.reload,
      rollupConfigPath: program.rollupConfig,
      silent: program.silent,
      transpilerPath: program.transpiler,
    });
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}
